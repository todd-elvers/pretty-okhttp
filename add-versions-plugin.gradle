/**
 * Adds the 'Versions' plugin to our project which adds the :dependencyUpdates 
 * task that will print to console the latest versions of all dependencies. 
 *
 * This task is modified in this script to only consider release versions of your 
 * dependencies as 'reportable' (e.g. if version 3.5 and version 4.0-RC1 both 
 * exist and you're on version 3.0, the task will report 3.5 as the latest version).
 * 
 * To revert to the default behavior of the task simply pass in the flag <code>-Pall</code>,
 * and the default behavior will be used (e.g. using our previous example the task would 
 * report 4.0-RC1 4.0-RC1 as the latest version).
 * 
 * See the variable `nonReleaseQualifiers` below for all non-release version keywords. 
 */


// Required syntax for applying a non-standard plugin from outside of build.gradle
buildscript {
    repositories.jcenter()
    dependencies.classpath "com.github.ben-manes:gradle-versions-plugin:0.21.0"
}
apply plugin: com.github.benmanes.gradle.versions.VersionsPlugin


def nonReleaseQualifiers = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea']
def flagToIncludeNonReleaseVersions = 'all'

// Configure the :dependencyUpdates task to only output release versions
dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            if(!project.hasProperty(flagToIncludeNonReleaseVersions)) {
                boolean isNonReleaseVersion = nonReleaseQualifiers.any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-+]*.*/
                }

                if (isNonReleaseVersion) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}